# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Merge Request PR

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm i
      - run: npm run lerna:bootstrap
      - run: npm run lerna:lint
      - run: npm run lerna:test
        env:
          DB_USER: ${{ secrets.DB_USER_TEST }}
          DB_PASS: ${{ secrets.DB_PASS_TEST }}
          DB_NAME: ${{ secrets.DB_NAME_TEST }}
          DB_HOST: ${{ secrets.DB_HOST_TEST }}
          JWT_ACCESS_TOKEN: ${{ secrets.JWT_ACCESS_TOKEN_TEST }}
          JWT_REFRESH_TOKEN: ${{ secrets.JWT_REFRESH_TOKEN_TEST }}
          ADMIN_TEST_USER: ${{ secrets.ADMIN_TEST_USER }}
          ADMIN_TEST_PASS: ${{ secrets.ADMIN_TEST_PASS }}
          PORTAL_ADRESS: ${{ secrets.PORTAL_ADRESS }}
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          STRIPE_SECRET: ${{ secrets.STRIPE_SECRET }}
          ONE_MONTH_ACCESS: ${{ secrets.ONE_MONTH_ACCESS }}
          ONE_DAY_ACCESS: ${{ secrets.ONE_DAY_ACCESS }}
      - run: npm run lerna:build
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          JWT_ACCESS_TOKEN: ${{ secrets.JWT_ACCESS_TOKEN }}
          JWT_REFRESH_TOKEN: ${{ secrets.JWT_REFRESH_TOKEN }}
          PORTAL_ADRESS: ${{ secrets.PORTAL_ADRESS }}
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          STRIPE_SECRET: ${{ secrets.STRIPE_SECRET }}
          ONE_MONTH_ACCESS: ${{ secrets.ONE_MONTH_ACCESS }}
          ONE_DAY_ACCESS: ${{ secrets.ONE_DAY_ACCESS }}
      - run: npm run test:coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/coverage-final.json
          flags: client, service
          name: project
        env:
          CI: true
